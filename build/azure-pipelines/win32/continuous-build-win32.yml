steps:
- task: NodeTool@0
  inputs:
    versionSpec: "10.15.1"
- task: geeklearningio.gl-vsts-tasks-yarn.yarn-installer-task.YarnInstaller@2
  inputs:
    versionSpec: "1.10.1"
# - task: UsePythonVersion@0
#   inputs:
#     versionSpec: '2.x'
#     addToPath: true
- task: RestoreCache@0
  inputs:
    key: |
      $(System.DefaultWorkingDirectory)/yarn.lock
      $(Agent.OS)
      $(Agent.JobName)
      $(CACHE_TYPE)
    path: 'node_modules'
    cacheHitVar: 'CacheRestoredNodeModules'
  condition: and(succeeded(), eq(variables['CACHE_NODE_MODULES'], 'True'))
- task: RestoreCache@0
  inputs:
    key: |
      $(System.DefaultWorkingDirectory)/yarn.lock
      $(Agent.OS)
      $(Agent.JobName)
      $(CACHE_TYPE)
    path: '$(YARN_CACHE_FOLDER)'
    cacheHitVar: 'CacheRestoredYarnCache'
  condition: and(succeeded(), eq(variables['CACHE_YARN'], 'True'))
# - task: 1ESLighthouseEng.PipelineArtifactCaching.RestoreCacheV1.RestoreCache@1
#   inputs:
#     keyfile: '**/yarn.lock, !**/node_modules/**/yarn.lock, !**/.*/**/yarn.lock'
#     targetfolder: '**/node_modules, !**/node_modules/**/node_modules'
#     vstsFeed: '$(ArtifactFeed)'
- powershell: |
    yarn
  displayName: Install Dependencies
  #condition: and(succeeded(), ne(variables['PipelineCache.CacheRestored'], 'True'))
- task: SaveCache@0
  inputs:
    key: |
      $(System.DefaultWorkingDirectory)/yarn.lock
      $(Agent.OS)
      $(Agent.JobName)
      $(CACHE_TYPE)
    path: 'node_modules'
  condition: and(succeeded(), and(ne(variables['CACHE_NODE_MODULES'], 'True'), ne(variables['PipelineCache.CacheRestoredNodeModules'], 'True')))
- task: SaveCache@0
  inputs:
    key: |
      $(System.DefaultWorkingDirectory)/yarn.lock
      $(Agent.OS)
      $(Agent.JobName)
      $(CACHE_TYPE)
    path: '$(YARN_CACHE_FOLDER)'
  condition: and(succeeded(), and(ne(variables['CACHE_NODE_MODULES'], 'True'), ne(variables['PipelineCache.CacheRestoredYarnCache'], 'True')))
# - task: 1ESLighthouseEng.PipelineArtifactCaching.SaveCacheV1.SaveCache@1
#   inputs:
#     keyfile: '**/yarn.lock, !**/node_modules/**/yarn.lock, !**/.*/**/yarn.lock'
#     targetfolder: '**/node_modules, !**/node_modules/**/node_modules'
#     vstsFeed: '$(ArtifactFeed)'
#   condition: and(succeeded(), ne(variables['CacheRestored'], 'true'))
# - powershell: |
#     yarn gulp electron
#   displayName: Download Electron
# - powershell: |
#     yarn gulp hygiene
#   displayName: Run Hygiene Checks
# - powershell: |
#     yarn monaco-compile-check
#   displayName: Run Monaco Editor Checks
# - powershell: |
#     yarn compile
#   displayName: Compile Sources
# - powershell: |
#     yarn download-builtin-extensions
#   displayName: Download Built-in Extensions
# - powershell: |
#     .\scripts\test.bat --tfs "Unit Tests"
#   displayName: Run Unit Tests
# - powershell: |
#     .\scripts\test-integration.bat --tfs "Integration Tests"
#   displayName: Run Integration Tests
# - task: PublishTestResults@2
#   displayName: Publish Tests Results
#   inputs:
#     testResultsFiles: '*-results.xml'
#     searchFolder: '$(Build.ArtifactStagingDirectory)/test-results'
#   condition: succeededOrFailed()
