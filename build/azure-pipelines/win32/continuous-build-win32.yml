steps:
- task: NodeTool@0
  inputs:
    versionSpec: "10.15.1"
- task: geeklearningio.gl-vsts-tasks-yarn.yarn-installer-task.YarnInstaller@2
  inputs:
    versionSpec: "1.10.1"
# - task: UsePythonVersion@0
#   inputs:
#     versionSpec: '2.x'
#     addToPath: true

- task: RestoreCache@0
  inputs:
    key: |
      $(System.DefaultWorkingDirectory)/yarn.lock
      $(Agent.OS)
      $(Agent.JobName)
      CACHE_NODE_MODULES=$(CACHE_NODE_MODULES)
      MATRIX_SALT=$(MATRIX_SALT) RUN_SALT=$(RUN_SALT)
    path: 'node_modules'
    cacheHitVar: 'CacheRestoredNodeModules'
  condition: and(succeeded(), eq(variables['CACHE_NODE_MODULES'], 'FILES'))

- task: RestoreCache@0
  inputs:
    key: |
      $(System.DefaultWorkingDirectory)/yarn.lock
      $(Agent.OS)
      $(Agent.JobName)
      CACHE_NODE_MODULES=$(CACHE_NODE_MODULES)
      MATRIX_SALT=$(MATRIX_SALT) RUN_SALT=$(RUN_SALT)
    path: '$(System.DefaultWorkingDirectory)/PACKED_NODE_MODULES'
    cacheHitVar: 'CacheRestoredNodeModulesTar'
  condition: and(succeeded(), eq(variables['CACHE_NODE_MODULES'], 'TAR'))
- bash: |
    set -x
    ls -l $(System.DefaultWorkingDirectory)/PACKED_NODE_MODULES
    mkdir $(System.DefaultWorkingDirectory)/node_modules
    cd $(System.DefaultWorkingDirectory)/node_modules
    tar -xf $(System.DefaultWorkingDirectory)/PACKED_NODE_MODULES/packed.tar
    ls -l
    rm -Rf $(System.DefaultWorkingDirectory)/PACKED_NODE_MODULES
  condition: and(succeeded(), and(eq(variables['CACHE_NODE_MODULES'], 'TAR'), eq(variables['PipelineCache.CacheRestoredNodeModulesTar'], 'True')))

- task: RestoreCache@0
  inputs:
    key: |
      $(System.DefaultWorkingDirectory)/yarn.lock
      $(Agent.OS)
      $(Agent.JobName)
      CACHE_YARN=$(CACHE_YARN)
      MATRIX_SALT=$(MATRIX_SALT) RUN_SALT=$(RUN_SALT)
    path: '$(YARN_CACHE_FOLDER)'
    cacheHitVar: 'CacheRestoredYarnCache'
  condition: and(succeeded(), eq(variables['CACHE_YARN'], 'FILES'))

- task: RestoreCache@0
  inputs:
    key: |
      $(System.DefaultWorkingDirectory)/yarn.lock
      $(Agent.OS)
      $(Agent.JobName)
      CACHE_YARN=$(CACHE_YARN)
      MATRIX_SALT=$(MATRIX_SALT) RUN_SALT=$(RUN_SALT)
    path: '$(System.DefaultWorkingDirectory)/PACKED_YARN_CACHE_FOLDER'
    cacheHitVar: 'CacheRestoredYarnCacheTar'
  condition: and(succeeded(), eq(variables['CACHE_YARN'], 'TAR'))
- bash: |
    set -x
    ls -l $(System.DefaultWorkingDirectory)/PACKED_YARN_CACHE_FOLDER/*
    mkdir $(YARN_CACHE_FOLDER)
    cd $(YARN_CACHE_FOLDER)
    tar -xf $(System.DefaultWorkingDirectory)/PACKED_YARN_CACHE_FOLDER/packed.tar
    ls -l
    rm -Rf $(System.DefaultWorkingDirectory)/PACKED_YARN_CACHE_FOLDER
  condition: and(succeeded(), and(eq(variables['CACHE_YARN'], 'TAR'), eq(variables['PipelineCache.CacheRestoredYarnCacheTar'], 'True')))

- powershell: |
    yarn
  displayName: Install Dependencies
  #condition: and(succeeded(), ne(variables['PipelineCache.CacheRestored'], 'True'))

- task: SaveCache@0
  inputs:
    key: |
      $(System.DefaultWorkingDirectory)/yarn.lock
      $(Agent.OS)
      $(Agent.JobName)
      CACHE_NODE_MODULES=$(CACHE_NODE_MODULES)
      MATRIX_SALT=$(MATRIX_SALT) RUN_SALT=$(RUN_SALT)
    path: 'node_modules'
  condition: and(succeeded(), and(eq(variables['CACHE_NODE_MODULES'], 'FILES'), ne(variables['PipelineCache.CacheRestoredNodeModules'], 'True')))

- bash: |
    set -x
    mkdir $(System.DefaultWorkingDirectory)/PACKED_NODE_MODULES
    cd $(System.DefaultWorkingDirectory)/node_modules
    ls
    tar -cf $(System.DefaultWorkingDirectory)/PACKED_NODE_MODULES/packed.tar .
    ls -l $(System.DefaultWorkingDirectory)/PACKED_NODE_MODULES
  condition: and(succeeded(), and(eq(variables['CACHE_NODE_MODULES'], 'TAR'), ne(variables['PipelineCache.CacheRestoredNodeModulesTar'], 'True')))
- task: SaveCache@0
  inputs:
    key: |
      $(System.DefaultWorkingDirectory)/yarn.lock
      $(Agent.OS)
      $(Agent.JobName)
      CACHE_NODE_MODULES=$(CACHE_NODE_MODULES)
      MATRIX_SALT=$(MATRIX_SALT) RUN_SALT=$(RUN_SALT)
    path: 'PACKED_NODE_MODULES'
  condition: and(succeeded(), and(eq(variables['CACHE_NODE_MODULES'], 'TAR'), ne(variables['PipelineCache.CacheRestoredNodeModulesTar'], 'True')))
- bash: |
    rm -Rf $(System.DefaultWorkingDirectory)/PACKED_NODE_MODULES
  condition: and(succeeded(), and(eq(variables['CACHE_NODE_MODULES'], 'TAR'), ne(variables['PipelineCache.CacheRestoredNodeModulesTar'], 'True')))

- bash: |
    set -x
    mkdir $(System.DefaultWorkingDirectory)/PACKED_YARN_CACHE_FOLDER
    cd $(YARN_CACHE_FOLDER)
    ls
    tar -cf $(System.DefaultWorkingDirectory)/PACKED_YARN_CACHE_FOLDER/packed.tar .
    ls -l $(System.DefaultWorkingDirectory)/PACKED_YARN_CACHE_FOLDER
  condition: and(succeeded(), and(eq(variables['CACHE_YARN'], 'TAR'), ne(variables['PipelineCache.CacheRestoredYarnCacheTar'], 'True')))
- task: SaveCache@0
  inputs:
    key: |
      $(System.DefaultWorkingDirectory)/yarn.lock
      $(Agent.OS)
      $(Agent.JobName)
      CACHE_YARN=$(CACHE_YARN)
      MATRIX_SALT=$(MATRIX_SALT) RUN_SALT=$(RUN_SALT)
    path: '$(YARN_CACHE_FOLDER)'
  condition: and(succeeded(), and(eq(variables['CACHE_YARN'], 'TAR'), ne(variables['PipelineCache.CacheRestoredYarnCache'], 'True')))
- bash: |
    rm -Rf $(System.DefaultWorkingDirectory)/PACKED_YARN_CACHE_FOLDER
  condition: and(succeeded(), and(eq(variables['CACHE_YARN'], 'TAR'), ne(variables['PipelineCache.CacheRestoredYarnCacheTar'], 'True')))


# - powershell: |
#     yarn gulp electron
#   displayName: Download Electron
# - powershell: |
#     yarn gulp hygiene
#   displayName: Run Hygiene Checks
# - powershell: |
#     yarn monaco-compile-check
#   displayName: Run Monaco Editor Checks
# - powershell: |
#     yarn compile
#   displayName: Compile Sources
# - powershell: |
#     yarn download-builtin-extensions
#   displayName: Download Built-in Extensions
# - powershell: |
#     .\scripts\test.bat --tfs "Unit Tests"
#   displayName: Run Unit Tests
# - powershell: |
#     .\scripts\test-integration.bat --tfs "Integration Tests"
#   displayName: Run Integration Tests
# - task: PublishTestResults@2
#   displayName: Publish Tests Results
#   inputs:
#     testResultsFiles: '*-results.xml'
#     searchFolder: '$(Build.ArtifactStagingDirectory)/test-results'
#   condition: succeededOrFailed()
